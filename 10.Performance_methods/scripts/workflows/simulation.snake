import sys
sys.path.insert(0, './')

import tskit
import pybedtools
from utils.demography import *
from utils.utils import *


configfile: "config/snakemake/config.yaml"
np.random.seed(config["seed"])
output_dir = config["output_dir"]
replicates = config["replicates"]
seq_len = config["seq_len"] * 10**6
seed_list = np.random.random_integers(1,2**31,replicates)
#seed_list= [986507085]
demo_model_list = config["gorilla_models"]
nref = [10]
ntgt = [1]


rule all:
    input:
        expand(output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.trees", 
               demog=demo_model_list, nref=nref, ntgt=ntgt, seed=seed_list),
        expand(output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.biallelic.vcf.gz", 
               demog=demo_model_list, nref=nref, ntgt=ntgt, seed=seed_list),
        expand(output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.introgressed.tracts.bed", 
               demog=demo_model_list, nref=nref, ntgt=ntgt, seed=seed_list),



rule simulation:
    input:
    output:
        ts = output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.trees",
        vcf = output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.vcf",
    threads: 1,
    resources: time_min=120, mem_mb=5000, cpus=1,
    run:
	    if wildcards.demog == 'GorillaNull':
	        demography, samples, src_id, tgt_id = gorilla_null_model(nref=int(wildcards.nref), ntgt=int(wildcards.ntgt))
	        mutation_rate = 1.235e-8
	        recombination_rate = 9.4e-9

        ts = run_simulation(demography=demography, samples=samples, mut_rate=mutation_rate, recomb_rate=recombination_rate, sequence_length=seq_len, random_seed=wildcards.seed)
        ts.dump(output.ts)

        with open(output.vcf, 'w') as o:
            ts.write_vcf(o)


rule get_tracts:
    input:
        ts = output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.trees",
    output:
        tracts = output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.introgressed.tracts.bed",
    threads: 1,
    resources: time_min=120, mem_mb=5000, cpus=1,
    run:
        ts = tskit.load(input.ts)

	    if wildcards.demog == 'GorillaNull':
	        src_id = "ghost"
	        tgt_id = "eastern_ancestor"

        get_introgressed_tracts(ts, chr_name=1, src_name=src_id, tgt_name=tgt_id, output=output.tracts)


rule get_biallelic_vcf:
    input:
        vcf = output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.vcf",
    output:
        vcf = output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.vcf.gz",
        bvcf = output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/sim.biallelic.vcf.gz",
    threads: 1,
    resources: time_min=120, mem_mb=5000, cpus=1,
    shell:
        """
        bcftools view {input.vcf} -m 2 -M 2 | awk -F "\\t" 'BEGIN{{OFS="\\t";ORS=""}}{{if($0~/^#/){{print $0"\\n"}}else{{print $1,$2,$3,"A","T\\t";for(i=6;i<NF;i++){{print $i"\\t"}};print $NF"\\n"}}}}' | bgzip -c > {output.bvcf}
        bgzip -c {input.vcf} > {output.vcf}
        rm {input.vcf}
        """
